!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
CAPAIsTaskSched	capa.c	/^bool CAPAIsTaskSched(struct task *table, int numEntry, bool *checkPass)$/;"	f
CC	Makefile	/^CC=gcc$/;"	m
CFLAGS	Makefile	/^CFLAGS=-g3 -Wall -Wextra -Wconversion -pedantic -Wshadow -Wpointer-arith -Wcast-qual \\$/;"	m
LDFLAGS	Makefile	/^LDFLAGS=-lm$/;"	m
MAX_PERIOD	main.c	9;"	d	file:
NUM_TASK	main.c	7;"	d	file:
OPTIsTaskSched	opt_rms.c	/^bool OPTIsTaskSched(struct task *table, int numEntry, bool *checkPass)$/;"	f
OPTTableCleanup	opt_rms.c	/^static void OPTTableCleanup(struct task *table, int numEntry)$/;"	f	file:
OverloadPeriodTransformTasks	opt_rms.c	/^static struct task *OverloadPeriodTransformTasks(struct task *table, int *tablesize)$/;"	f	file:
PTIsTaskSched	pt_rms.c	/^bool PTIsTaskSched(struct task *table, int numEntry, bool *checkPass)$/;"	f
PTIsTaskSched	vopt_rms.c	/^bool PTIsTaskSched(struct task *table, int numEntry, bool *checkPass)$/;"	f
PTIsTaskSchedNaive	pt_rms.c	/^bool PTIsTaskSchedNaive(struct task *table, int numEntry, bool *checkPass)$/;"	f
PeriodTransformTasks	pt_rms.c	/^static struct task *PeriodTransformTasks(struct task *table, int *tablesize)$/;"	f	file:
PeriodTransformTasks	vopt_rms.c	/^struct task *PeriodTransformTasks(struct task *table, int *tablesize)$/;"	f
RMIsTaskSched	rms.c	/^bool RMIsTaskSched(struct task *table, int numEntry, bool *checkPass)$/;"	f
ZSRMSIsTaskSched	zsrms.c	/^bool ZSRMSIsTaskSched(struct task *table, int numEntry, bool *checkPass)$/;"	f
__COMMON_H__	common.h	2;"	d
admitAllCAPATask	capa.c	/^static bool admitAllCAPATask(struct task *table, int tablesize)$/;"	f	file:
admitAllOPTTask	opt_rms.c	/^static bool admitAllOPTTask(struct task *table, int tablesize)$/;"	f	file:
admitAllPTTask	pt_rms.c	/^static bool admitAllPTTask(struct task *table, int tablesize)$/;"	f	file:
admitAllPTTask	vopt_rms.c	/^bool admitAllPTTask(struct task *table, int tablesize)$/;"	f
admitAllPTTaskNaive	pt_rms.c	/^static bool admitAllPTTaskNaive(struct task *table, int tablesize)$/;"	f	file:
admitAllRMTask	rms.c	/^static bool admitAllRMTask(struct task *table, int tablesize)$/;"	f	file:
admitAllZSRMSTask	zsrms.c	/^static bool admitAllZSRMSTask(struct task *table, int tablesize)$/;"	f	file:
checkOPTTable	opt_rms.c	/^static bool checkOPTTable(struct task *table, int numEntry)$/;"	f	file:
checkPass	main.c	/^	bool checkPass;$/;"	m	struct:expFunc	file:
checkProp	common.c	/^static bool checkProp(struct task *rtask)$/;"	f	file:
checkTable	common.c	/^bool checkTable(struct task *table, int tablesize)$/;"	f
compare	main.c	/^static void compare(struct task *table, int tablesize, double *criticality)$/;"	f	file:
copyTask	common.c	/^void copyTask(struct task *dest, struct task *src)$/;"	f
criticality	common.h	/^	double criticality;$/;"	m	struct:task
criticalitySort	common.c	/^int criticalitySort(const void *a, const void *b)$/;"	f
exectime_in_rm_ns	common.h	/^	double exectime_in_rm_ns;$/;"	m	struct:task
exectime_ns	common.h	/^	double exectime_ns;$/;"	m	struct:task
expFunc	main.c	/^struct expFunc {$/;"	s	file:
fails	main.c	/^	size_t fails;$/;"	m	struct:expFunc	file:
func	main.c	/^	bool (*func)(struct task *table, int tablesize, bool *checkPass);$/;"	m	struct:expFunc	file:
funcList	main.c	/^static struct expFunc funcList[] =$/;"	v	typeref:struct:expFunc	file:
getExecTimeHigherPrioHigherCrit	zsrms.c	/^static double getExecTimeHigherPrioHigherCrit(struct task *rtask) {$/;"	f	file:
getExecTimeHigherPrioSameCrit	zsrms.c	/^static double getExecTimeHigherPrioSameCrit(struct task *rtask) {$/;"	f	file:
getExecTimeLowerPrioHigherCrit	zsrms.c	/^static double getExecTimeLowerPrioHigherCrit(struct task *rtask) {$/;"	f	file:
getNextInSet	common.c	/^int getNextInSet(struct task *table, int *sidx, int tablesize,$/;"	f
getPTTaskNaiveResponseTime	pt_rms.c	/^static double getPTTaskNaiveResponseTime(struct task *table, int tablesize, struct task *rtask)$/;"	f	file:
getPTTaskResponseTime	pt_rms.c	/^static double getPTTaskResponseTime(struct task *table, int tablesize, struct task *rtask)$/;"	f	file:
getPTTaskResponseTime	vopt_rms.c	/^double getPTTaskResponseTime(struct task *table, int tablesize, struct task *rtask)$/;"	f
getRMInterference	zsrms.c	/^static double getRMInterference(struct task *table, int tablesize, struct task *rtask, double Z) {$/;"	f	file:
getResponseTimeCAPA	common.c	/^double getResponseTimeCAPA(struct task *table, int tablesize,$/;"	f
getResponseTimeCritNs	zsrms.c	/^static double getResponseTimeCritNs(struct task *table, int tablesize, struct task *rtask) {$/;"	f	file:
getResponseTimePT	common.c	/^double getResponseTimePT(struct task *table, int tablesize,$/;"	f
getResponseTimeRM	common.c	/^double getResponseTimeRM(struct task *table, int tablesize,$/;"	f
getZSRMSTaskResponseTime	zsrms.c	/^static bool getZSRMSTaskResponseTime(struct task *table, int tablesize, struct task *rtask, double *calcZ, double *calcResp)$/;"	f	file:
initializeTask	common.c	/^void initializeTask(struct task *rtask)$/;"	f
isHigherCrit	common.c	/^static bool isHigherCrit(struct task *rtask, struct task *other)$/;"	f	file:
isHigherPrio	common.c	/^static bool isHigherPrio(struct task *rtask, struct task *other)$/;"	f	file:
isHigherPrioHigherCrit	zsrms.c	/^static bool isHigherPrioHigherCrit(struct task *rtask, struct task *o) {$/;"	f	file:
isHigherPrioLowerCrit	zsrms.c	/^static bool isHigherPrioLowerCrit(struct task *rtask, struct task *o) {$/;"	f	file:
isHigherPrioSameCrit	zsrms.c	/^static bool isHigherPrioSameCrit(struct task *rtask, struct task *o) {$/;"	f	file:
isLowerPrioHigherCrit	zsrms.c	/^static bool isLowerPrioHigherCrit(struct task *rtask, struct task *o) {$/;"	f	file:
isTaskSetPossible	main.c	/^static bool isTaskSetPossible(struct task *table, int tablesize)$/;"	f	file:
is_overload_task	common.h	/^	bool is_overload_task;$/;"	m	struct:task
main	capa.c	/^int main(int argc, char **argv)$/;"	f
main	main.c	/^int main(int argc, char **argv)$/;"	f
main	opt_rms.c	/^int main(int argc, char **argv)$/;"	f
main	pt_rms.c	/^int main(int argc, char **argv)$/;"	f
main	rms.c	/^int main(int argc, char **argv)$/;"	f
main	vopt_rms.c	/^int main(int argc, char **argv)$/;"	f
main	zsrms.c	/^int main(int argc, char **argv)$/;"	f
n	common.h	/^	int n;$/;"	m	struct:task
name	main.c	/^	char *name;$/;"	m	struct:expFunc	file:
nominal_exectime_ns	common.h	/^	double nominal_exectime_ns;$/;"	m	struct:task
normTaskNComp	common.c	/^double normTaskNComp(struct task *rtask)$/;"	f
normTaskOComp	common.c	/^double normTaskOComp(struct task *rtask)$/;"	f
normTaskPeriod	common.c	/^double normTaskPeriod(struct task *rtask)$/;"	f
numExp	main.c	/^static int numExp = 0;$/;"	v	file:
numUnscheduable	main.c	/^static int numUnscheduable = 0;$/;"	v	file:
overload_task	common.h	/^	struct task *overload_task;$/;"	m	struct:task	typeref:struct:task::task
parseArgs	common.c	/^struct task *parseArgs(int argc, char **argv, int *tablesize)$/;"	f
period_ns	common.h	/^	double period_ns;$/;"	m	struct:task
permute	main.c	/^static void permute(double *array, int i, int length,$/;"	f	file:
printOnCheckFail	main.c	/^	bool printOnCheckFail;$/;"	m	struct:expFunc	file:
printOnFail	main.c	/^	bool printOnFail;$/;"	m	struct:expFunc	file:
printTaskset	main.c	/^static void printTaskset(struct task *table, int numEntry)$/;"	f	file:
result	main.c	/^	bool result;$/;"	m	struct:expFunc	file:
swap	main.c	/^static void swap(double *a, double *b)$/;"	f	file:
task	common.h	/^struct task {$/;"	s
